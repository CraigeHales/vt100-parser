#!/usr/bin/env python

import sys, os

EXT = '.html'

CONTROL_CHAR = 
NUL = '\000'    # '\0'
SOH = '\001'    # (start of heading)
STX = '\002'    # (start of text)
ETX = '\003'    # (end of text)
EOT = '\004'    # (end of transmission)
ENQ = '\005'    # (enquiry)
ACK = '\006'    # (acknowledge)
BEL = '\007'    # '\a' (bell)
BS  = '\010'    # '\b' (backspace)
HT  = '\011'    # '\t' (horizontal tab)
LF  = '\012'    # '\n' (new line)
VT  = '\013'    # '\v' (vertical tab)
FF  = '\014'    # '\f' (form feed)
CR  = '\015'    # '\r' (carriage ret)
SO  = '\016'    # (shift out)
SI  = '\017'    # (shift in)
DLE = '\020'    # (data link escape)
DC1 = '\021'    # (device control 1)
DC2 = '\022'    # (device control 2)
DC3 = '\023'    # (device control 3)
DC4 = '\024'    # (device control 4)
NAK = '\025'    # (negative ack.)
SYN = '\026'    # (synchronous idle)
ETB = '\027'    # (end of trans. blk)
CAN = '\030'    # (cancel)
EM  = '\031'    # (end of medium)
SUB = '\032'    # (substitute)
ESC = '\033'    # (escape)
FS  = '\034'    # (file separator)
GS  = '\035'    # (group separator)
RS  = '\036'    # (record separator)
US  = '\037'    # (unit separator)
SPACE = ' '



ATTRIBUTES  = 0xffff0000
BOLD        = 0x00010000
UNDERLINE   = 0x00020000
BLINK       = 0x00040000
INVERSE     = 0x00080000
FG_POS      = 20
FG_POS      = 24
FG          = 0xf << FG_POS
BG          = 0xf << BG_POS
BLACK       = 0
RED         = 1
GREEN       = 2
YELLOW      = 3
BLUE        = 4
MAGENTA     = 5
CYAN        = 6
WHITE       = 7
COLOR_SET   = 8
FG_BLACK    = (BLACK   | COLOR_SET) << FG_POS
FG_RED      = (RED     | COLOR_SET) << FG_POS
FG_GREEN    = (GREEN   | COLOR_SET) << FG_POS
FG_YELLOW   = (YELLOW  | COLOR_SET) << FG_POS
FG_BLUE     = (BLUE    | COLOR_SET) << FG_POS
FG_MAGENTA  = (MAGENTA | COLOR_SET) << FG_POS
FG_CYAN     = (CYAN    | COLOR_SET) << FG_POS
FG_WHITE    = (WHITE   | COLOR_SET) << FG_POS
BG_BLACK    = (BLACK   | COLOR_SET) << BG_POS
BG_RED      = (RED     | COLOR_SET) << BG_POS
BG_GREEN    = (GREEN   | COLOR_SET) << BG_POS
BG_YELLOW   = (YELLOW  | COLOR_SET) << BG_POS
BG_BLUE     = (BLUE    | COLOR_SET) << BG_POS
BG_MAGENTA  = (MAGENTA | COLOR_SET) << BG_POS
BG_CYAN     = (CYAN    | COLOR_SET) << BG_POS
BG_WHITE    = (WHITE   | COLOR_SET) << BG_POS


M_NORMAL, M_ESCAPE, IGNORE_TEXT, PM, APC, DCS, CSR, ACCEPT_CHAR = range(5)


class Screen (object):
    def __init__(self):
        self.width = 80
        self.height = 24
        self.pos = [0,0]
        self.current_attributes = 0
        self.history = []
        self.screen = [[]]
        self.add = self.add_normal

    def move(self, down, right):
        self.pos[0] += max(-self.pos[0], down)
        self.pos[1] += max(-self.pos[1], right)
        if self.pos[0] > self.height:
            extra = self.pos[0] - self.height
            self.history.extend( self.screen[:extra] )
            del self.screen[:extra]

    def __setattr__(self, pos, value):
        if pos[0] >= len(self.screen):
            if pos[0] > self.height:
                self.history.extend( self.screen[]) # TODO


    def ignored(self, c):
        pass

    def literal_insert(self, c):
        self[self.pos] = c | self.current_attributes
        self.pos[1] += 1


    todo = ignored


    BEL = todo
    def BS(self,c): self.move(0, -1)
    def HT(self,c): self.move(0, 8-(self.pos[1]%8))
    def LF(self,c): self.move(1, 0)
    VT = LF
    FF = LF
    def CR (self,c): self.move(0, -self.pos[1])

    # The following are implemented in xterm but not here (probably never):
    # Character set stuff, probably will never be implemetned
    SCS_designate_G0 = ignored
    SCS_designate_G1 = ignored
    SCS_designate_G2 = ignored
    SCS_designate_G3 = ignored
    LS1 = ignored       # SO in xterm.seq
    LS0 = ignored       # SI in xterm.seq
    DECALN = ignored

    # The following are implemented in xterm but not here (yet):
    DECSC = ignored
    DECRC = ignored



    def add_normal(self, c):
        if c == ESC:
            self.add = self.add_escape
        else:

    def add(self, string):
        mode = self.mode
        for c in string:
            if mode == M_NORMAL:
            if mode == '
                if c != ESC:
                    self.append(c)
        self.mode = mode

    def output(self):
        raise NotImplementedError()


def vt100_to_html(s):
    return Screen(s).output()


def process(infilename, outfilename = None):
    if outfilename is None:
        if infilename == '-':
            outfilename = '-'
        else:
            outfilename = infilename + EXT

    # Slurp the input
    if infilename == '-':
        infile = sys.stdin
    else:
        infile = open(infilename, 'rb')
    input = infile.read()
    if infile is not sys.stdin:
        infile.close()

    output = vt100_to_html(input)

    # Write all the output
    if outfilename == '-':
        outfile = sys.stdout
    else:
        outfile = open(outfilename, 'wb')
    outfile.write(output)
    if outfile is not sys.stdout:
        outfile.close()


def main(argv):
    if argv:
        for filename in sys.argv[1:]:
            main(filename)
    else:
        main('-')

if __name__ == "__main__":
    main(sys.argv[1:])
