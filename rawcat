#!/usr/bin/python
"""\
USAGE: %prog [-b BYTES] [-w MSEC] FILE...

Print the given file(s) to standard output without converting LF to CRLF.

To pause after each byte output, run with ``-w 100``.
"""

__license__ = """
Copyright (c) 2009 Mark Lodato

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

import re
import sys
import termios
import time
from optparse import OptionParser

__metaclass__ = type

OFLAG = 1

class RawMode:
    def __init__(self, f):
        self.f = f
    def __enter__(self):
        self.saved = termios.tcgetattr(self.f)
        mode = list(self.saved)
        mode[OFLAG] &= ~termios.OPOST
        termios.tcsetattr(self.f, termios.TCSAFLUSH, mode)
        return self.f
    def __exit__(self, exc_type, exc_val, exc_tb):
        termios.tcsetattr(self.f, termios.TCSAFLUSH, self.saved)

def rawcat(files, outfile, bufsiz=None, wait=None):
    if wait is None:
        if not bufsiz:
            bufsiz = 4096
        wait = 0.0
    else:
        if not bufsiz:
            bufsiz = 1
        wait /= 1000.0
    with RawMode(outfile):
        for filename in files:
            if filename == '-':
                f = sys.stdout
            else:
                f = open(filename, 'rb')
            while True:
                buf = f.read(bufsiz)
                if not buf:
                    break
                outfile.write(buf)
                if wait:
                    outfile.flush()
                    time.sleep(wait)
            if filename != '-':
                f.close()

if __name__ == "__main__":
    doc = globals()['__doc__']
    usage, desc = re.match(r'USAGE:\s*(.*?)\n{2,}(.*)', doc,
                           re.DOTALL | re.IGNORECASE).groups()
    parser = OptionParser(usage=usage, description=desc)
    parser.add_option('-b', '--buffer-size', type='int', metavar='BYTES',
            help='Read this many bytes at at time (default: 1 if -w, else 4096)')
    parser.add_option('-w', '--wait', type='float', metavar='MSEC',
            help='Milliseconds to wait between buffers (default: no wait)')
    options, args = parser.parse_args()
    if not args:
        parser.print_usage()
        sys.exit(1)
    rawcat(args, sys.stdout, bufsiz=options.buffer_size, wait=options.wait)
